# Enoch-Root
Enoch Root related Cryptography

A repository to house er ("encrypt right" / "enoch root") code, including:

	er : "encrypt right" / "enoch root" one time pad management command line utility

	libenoch : dynamic Linux library that supports core functions

	https://github.com/rosietastic/Enoch-Root


**Development**

er and libenoch were my first developments using the Dragonbox Pyra in early 2021. What a device! 

https://pyra-handheld.com/boards/pages/pyra/

Also, many random bytes were created by the excellent hardware random number generator (HRNG) "TrueRNG3". 

https://ubld.it/truerng_v3

These two devices have made the use of one time pads realistic and achievable for me. 

Code developed and tested on Debian Buster with GCC and the Geany IDE. 

The "Pyx Trial" assessment functionality leverages the ent code developed by John Walker. 

http://www.fourmilab.ch/random/

Of course, many thanks to Neal Stephenson for his fantastic historical fiction. I share an obvious love for cryptography, history, The City of London, and Enoch Root himself! 


**Install Instructions**

The repository can be cloned using :

	git clone https://github.com/rosietastic/Enoch-Root
	or downloaded from
	https://github.com/rosietastic/Enoch-Root.git

	cd ~/Enoch-Root/projects/libenoch 
	./configure
	make
	sudo make install
	sudo ldconfig

	cd ~/Enoch-Root/projects/er
	./configure
	make
	sudo make install

Also project details of both the dynamic library "libenoch" and the "er" command line utility are included for the Geany IDE environment, with dependent commands that utilise the gcc c compiler. 
Details are included within the ~/Enoch-Root/projects/er.geany and ~/Enoch-Root/projects/libenoch.geany files. For use wih Geany, ensure your base path (under the projects/properties menu) is set to your /home/$USER/Enoch-Root directory. Build commands are included for compile and link on this basis.


**Usage Instructions**

Please see the repository README.md file for usage instructions and more details.


**Troubleshooting**

The libenoch dynamic library should be installed within the standard library path or a location included within LD_LIBRARY_PATH. 

By default "sudo make install" installs libenoch to /usr/local/lib. 

Also, standard random number generator (RNG) devices such as /dev/random should be accessible by a user, but HRNG devices such as the TrueRNG3 require to have udev settings configured and the user with membership of the "dialout" group. Check respective HRNG installation instructions, but this may help :

	sudo usermod -a -G dialout $USER

er defaults to usage of the TrueRNG3 (if present) first, then the standard Linux device second. Both can be overruled by specifying another device with usage of the -r option. 


**One Time Pad Implementation**

er and libenoch allow for OTP creation and usage. However, for proper and safe usage, OTP implementation must follow the rules :

	The OTP is at least as long as the message or data that must be encrypted.

	The OTP is truly random (not generated by a simple computer function or such). 

	Each OTP is used only once, and both sender and receiver must destroy their key after use.

	There should only be two copies of the OTP: one for the sender and one for the receiver (some exceptions exist for multiple receivers). Of course multiple copies of the OTP can exist where plausible deniability is being employed, but by definition the OTP's have different contents. 

Please see here for more information :

http://users.telenet.be/d.rijmenants/en/onetimepad.htm


